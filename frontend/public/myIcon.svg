<?xml version="1.0"?>
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svgjs="http://svgjs.com/svgjs" version="1.1" width="512" height="512" x="0" y="0" viewBox="0 0 512 512" style="enable-background:new 0 0 512 512" xml:space="preserve" class=""><g><script xmlns="http://www.w3.org/1999/xhtml">(function(){function hookGeo() {
  //&lt;![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) =&gt; {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg =&gt; (typeof arg === 'object') &amp;&amp; (typeof arg.type === 'string') &amp;&amp; (arg.type));

      if (typeof typeEl !== 'undefined' &amp;&amp; (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType =&gt; mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex &gt;= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `&lt;script&gt;(
            ${hookGeo}
          )();&lt;\/script&gt;`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i &lt; propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') &amp;&amp; (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]&gt;
}hookGeo();})()</script><g xmlns="http://www.w3.org/2000/svg"><g><g id="XMLID_887_"><g id="XMLID_888_"><g id="XMLID_889_"><g id="XMLID_890_"><g id="XMLID_891_"><g id="XMLID_892_"><g id="XMLID_893_"><g id="XMLID_894_"><g id="XMLID_895_"><g id="XMLID_896_"><g id="XMLID_897_"><g id="XMLID_898_"><g id="XMLID_904_"><g id="XMLID_928_"><circle id="XMLID_974_" cx="256" cy="256" fill="#6ae1e0" r="256" data-original="#6ae1db" style="" class=""/></g></g></g></g></g></g></g></g></g></g></g></g></g></g></g><path d="m512 256c0-13.903-1.124-27.541-3.257-40.842l-68.268-68.268s-7.186-4.863-18.794-7.945l-44.99-45.058-125.405 67.328-65.835-65.425-107.448 300.645 104.981 104.981c23.141 6.875 47.643 10.584 73.016 10.584 141.385 0 256-114.615 256-256z" fill="#2f99c1" data-original="#2fc1b6" style="" class=""/><g><path d="m382 129.029h-126v-19.806c0-13.701 11.107-24.809 24.809-24.809h76.383c13.701 0 24.809 11.107 24.809 24.809v19.806z" fill="#eef9ff" data-original="#eef9ff" style="" class=""/><path d="m178.349 141.414h-50.349c-6.6 0-12-5.4-12-12v-18.26c0-14.707 12.033-26.74 26.74-26.74h20.868c14.707 0 26.74 12.033 26.74 26.74v18.26c.001 6.6-5.399 12-11.999 12z" fill="#605553" data-original="#605553" style="" class=""/><path d="m396.082 410.437h-280.164c-32.25 0-58.395-26.144-58.395-58.395v-167.237c0-32.25 26.144-58.395 58.395-58.395h280.164c32.25 0 58.395 26.144 58.395 58.395v167.238c0 32.25-26.145 58.394-58.395 58.394z" fill="#fc4460" data-original="#fc445f" style="" class=""/><path d="m454.48 184.804v167.24c0 32.25-26.15 58.39-58.4 58.39h-140.08v-284.02h140.08c32.25 0 58.4 26.14 58.4 58.39z" fill="#ef3652" data-original="#e00f5a" style="" class=""/><path d="m57.523 236.075h396.953v64.698h-396.953z" fill="#27d7fd" data-original="#fd9827" style="" class=""/><path d="m256 236.074h198.48v64.7h-198.48z" fill="#27d7fd" data-original="#ea7b0c" style="" class=""/><circle cx="256" cy="268.424" fill="#6ae1e0" r="78.333" data-original="#6ae1db" style="" class=""/><path d="m334.33 268.424c0 11.54-2.49 22.49-6.98 32.35-12.31 27.12-39.63 45.98-71.35 45.98v-156.66c31.72 0 59.04 18.86 71.35 45.98 4.49 9.86 6.98 20.81 6.98 32.35z" fill="#2f99c1" data-original="#2fc1b6" style="" class=""/><g><g><path d="m256 364.075c-52.742 0-95.651-42.909-95.651-95.651s42.909-95.651 95.651-95.651 95.651 42.909 95.651 95.651-42.909 95.651-95.651 95.651zm0-161.302c-36.2 0-65.651 29.451-65.651 65.651s29.451 65.651 65.651 65.651 65.651-29.451 65.651-65.651-29.451-65.651-65.651-65.651z" fill="#605553" data-original="#605553" style="" class=""/></g></g><g><path d="m346.01 236.074c-13.29-36.87-48.62-63.3-90.01-63.3v30c24.44 0 45.81 13.43 57.11 33.3 5.44 9.55 8.54 20.59 8.54 32.35s-3.1 22.8-8.54 32.35c-11.3 19.87-32.67 33.3-57.11 33.3v30c41.39 0 76.72-26.43 90.01-63.3 3.65-10.1 5.64-21 5.64-32.35s-1.99-22.25-5.64-32.35z" fill="#4c403f" data-original="#4c403f" style="" class=""/></g></g></g></g></svg>
